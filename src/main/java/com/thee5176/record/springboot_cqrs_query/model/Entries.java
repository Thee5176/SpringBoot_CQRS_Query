/*
 * This file is generated by jOOQ.
 */
package com.thee5176.record.springboot_cqrs_query.model;


import java.time.LocalDateTime;
import java.util.UUID;

import com.thee5176.record.springboot_cqrs_query.model.enums.BalanceType;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;


/**
 * エントリー：取引内の科目だけの関係で分ける
 * 
 * ttps://www.geeksforgeeks.org/accountancy/accounting-entry-meaning-types-advantages-examples/

 */
@Entity
@Table(name = "entries")
public class Entries {
//TODO:Create Swagger Docs
    // POST
    // {
    //     "transactionId": "4c7789de-c491-4bc5-9a77-2ae716147300",
    //     "coa": 5210,
    //     "amount": 0.1,
    //     "type": "Debit",
    //     "createdAt": "2025-07-02T03:50:57.835Z",
    //     "updatedAt": "2025-07-02T03:50:57.835Z"
    //   }

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;
    @Column(name = "transaction_id", nullable = false, unique = false)
    private UUID transactionId;
    @Column(name = "coa", nullable = false, unique = false)
    private Integer coa;
    @Column(name = "amount", nullable = false, unique = false)
    private Double amount;
    @Column(name = "type", nullable = false, unique = false)
    private BalanceType type;
    @Column(name = "created_at", nullable = false, unique = false)
    private LocalDateTime createdAt;
    @Column(name = "updated_at", nullable = false, unique = false)
    private LocalDateTime updatedAt;

    public Entries() {
    }

    public Entries(Entries value) {
        this.id = value.id;
        this.transactionId = value.transactionId;
        this.coa = value.coa;
        this.amount = value.amount;
        this.type = value.type;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
    }

    public Entries(
            UUID id,
            UUID transactionId,
            Integer coa,
            Double amount,
            BalanceType type,
            LocalDateTime createdAt,
            LocalDateTime updatedAt) {
        this.id = id;
        this.transactionId = transactionId;
        this.coa = coa;
        this.amount = amount;
        this.type = type;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for <code>public.entries.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.entries.id</code>.
     */
    public Entries setId(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>public.entries.transaction_id</code>.
     */
    public UUID getTransactionId() {
        return this.transactionId;
    }

    /**
     * Setter for <code>public.entries.transaction_id</code>.
     */
    public Entries setTransactionId(UUID transactionId) {
        this.transactionId = transactionId;
        return this;
    }

    /**
     * Getter for <code>public.entries.coa</code>.
     */
    public Integer getCoa() {
        return this.coa;
    }

    /**
     * Setter for <code>public.entries.coa</code>.
     */
    public Entries setCoa(Integer coa) {
        this.coa = coa;
        return this;
    }

    /**
     * Getter for <code>public.entries.amount</code>.
     */
    public Double getAmount() {
        return this.amount;
    }

    /**
     * Setter for <code>public.entries.amount</code>.
     */
    public Entries setAmount(Double amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Getter for <code>public.entries.type</code>.
     */
    public BalanceType getType() {
        return this.type;
    }

    /**
     * Setter for <code>public.entries.type</code>.
     */
    public Entries setType(BalanceType type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>public.entries.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>public.entries.created_at</code>.
     */
    public Entries setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>public.entries.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>public.entries.updated_at</code>.
     */
    public Entries setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Entries other = (Entries) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        } else if (!this.id.equals(other.id))
            return false;
        if (this.transactionId == null) {
            if (other.transactionId != null)
                return false;
        } else if (!this.transactionId.equals(other.transactionId))
            return false;
        if (this.coa == null) {
            if (other.coa != null)
                return false;
        } else if (!this.coa.equals(other.coa))
            return false;
        if (this.amount == null) {
            if (other.amount != null)
                return false;
        } else if (!this.amount.equals(other.amount))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        } else if (!this.type.equals(other.type))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        } else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        } else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.transactionId == null) ? 0 : this.transactionId.hashCode());
        result = prime * result + ((this.coa == null) ? 0 : this.coa.hashCode());
        result = prime * result + ((this.amount == null) ? 0 : this.amount.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Entries (");

        sb.append(id);
        sb.append(", ").append(transactionId);
        sb.append(", ").append(coa);
        sb.append(", ").append(amount);
        sb.append(", ").append(type);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);

        sb.append(")");
        return sb.toString();
    }
}
